### YamlMime:YamlDocument
documentType: Tutorial
title: Raccolte in C#
metadata:
  title: Raccolte in C#. Imparare a usare sequenze e raccolte in C#.
  description: "In questa esercitazione si userà il browser per imparare a usare C# in modo interattivo. Verranno descritte le procedure per scrivere codice C# e visualizzare i risultati della compilazione ed esecuzione del codice direttamente nel browser."
  audience: Developer
  ms.custom: mvc
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: e00cf6badcbd39cc1e9320095169d86efb9cad8f
  ms.sourcegitcommit: 43c656811dd38a66a6672084c65d10c0cbbf2015
  ms.translationtype: HT
  ms.contentlocale: it-IT
  ms.lasthandoff: 11/22/2017
items:
- durationInMinutes: 1
  content: "Questa Guida introduttiva illustra c# in modo interattivo, utilizzando il browser per scrivere codice c# e visualizzare i risultati della compilazione e l'esecuzione del codice. L'esercitazione è composta da una serie di lezioni che descrivono come creare, modificare ed esplorare raccolte e matrici.\n"
- title: Creare elenchi
  durationInMinutes: 2
  content: "Eseguire il codice seguente nella finestra interattiva. A tale scopo, digitare il blocco di codice seguente nella finestra interattiva (sostituire \"<name>\" con il proprio nome) e fare clic sul pulsante **Esegui**:\n\n```csharp\nvar names = new List<string> { \"<name>\", \"Ana\", \"Felipe\" };\nforeach (var name in names)\n{\n  Console.WriteLine($\"Hello {name.ToUpper()}!\");\n}\n```\n\nQuesto codice consente di creare un elenco di stringhe, aggiungere tre nomi all'elenco e stampare i nomi in lettere maiuscole. Vengono usati i concetti appresi in guide introduttive precedenti per scorrere l'elenco in ciclo.\n\nIl codice per visualizzare i nomi usa **stringhe interpolate**.  Anteponendo il carattere `$` a `string`, è possibile incorporare il codice C# nella dichiarazione della stringa. La stringa effettiva sostituisce il codice C# con il valore generato. In questo esempio, `{name.ToUpper()}` viene sostituito con ogni nome, convertito in lettere maiuscole, perché è stato chiamato il metodo <xref:System.String.ToUpper%2A>.\n\nL'esplorazione continua nelle prossime lezioni.\n\n> [!NOTE]\n> Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Modificare il contenuto dell'elenco
  durationInMinutes: 3
  content: "La raccolta creata usa il tipo <xref:System.Collections.Generic.List%601>. Questo tipo archivia sequenze di elementi. Il tipo degli elementi viene specificato tra parentesi uncinate.\n\nUn aspetto importante di questo tipo di <xref:System.Collections.Generic.List%601> è che supporta estensioni o riduzioni, consentendo l'aggiunta o la rimozione di elementi. Aggiungere il codice seguente sotto il codice già scritto:\n\n```csharp\nConsole.WriteLine();\nnames.Add(\"Maria\");\nnames.Add(\"Bill\");\nnames.Remove(\"Ana\");\nforeach (var name in names)\n{\n  Console.WriteLine($\"Hello {name.ToUpper()}!\");\n}\n```\n\nSono stati aggiunti altri due nomi alla fine dell'elenco e ne è stato anche rimosso uno.\n\n<xref:System.Collections.Generic.List%601> consente di fare riferimento a singoli elementi anche in base all'**indice**. Per accedere agli elementi si usano i token `[` e `]`. Aggiungere il codice seguente sotto il codice già scritto e provarlo:\n\n```csharp\nConsole.WriteLine($\"My name is {names[0]}.\");\nConsole.WriteLine($\"I've added {names[2]} and {names[3]} to the list.\");\n```\n\nNon è consentito l'accesso oltre la fine dell'elenco. È possibile controllare la lunghezza dell'elenco tramite la proprietà <xref:System.Collections.Generic.List%601.Count%2A>. Aggiungere il codice seguente per provarlo:\n\n```csharp\nConsole.WriteLine($\"The list has {names.Count} people in it\");\n```\n\nFare clic su **Esegui** di nuovo per visualizzare i risultati. In C# gli indici iniziano da 0, pertanto l'indice massimo valido è minore di un'unità rispetto al numero di elementi nell'elenco.\n\n> [!NOTE]\n> Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Eseguire ricerche negli elenchi e ordinarli
  durationInMinutes: 5
  content: "In questi esempi vengono usati elenchi relativamente piccoli, ma le applicazioni reali creano spesso elenchi con molti più elementi, a volte anche migliaia. Per trovare elementi in raccolte di tali dimensioni, è necessario avere la possibilità di eseguire ricerche nell'elenco. Il metodo <xref:System.Collections.Generic.List%601.IndexOf%2A> cerca un elemento e ne restituisce l'indice. Provare questo codice per verificarne il funzionamento.  Aggiungere il codice seguente sotto il codice già scritto finora:\n\n```csharp\nvar index = names.IndexOf(\"Felipe\");\nif (index != -1)\n  Console.WriteLine($\"The name {names[index]} is at index {index}\");\n\nvar notFound = names.IndexOf(\"Not Found\");\n  Console.WriteLine($\"When an item is not found, IndexOf returns {notFound}\");\n```\n\nSi potrebbe non sapere se un elemento è presente nell'elenco, quindi è consigliabile controllare sempre l'indice restituito da <xref:System.Collections.Generic.List%601.IndexOf%2A>. Se è 1, l'elemento non è stato trovato.\n\nGli elementi in un elenco possono anche essere ordinati. Il metodo <xref:System.Collections.Generic.List%601.Sort%2A> ordina tutti gli elementi nell'elenco in base all'ordine normale (alfabetico nel caso delle stringhe). Aggiungere questo codice ed eseguire di nuovo:\n\n```csharp\nnames.Sort();\nforeach (var name in names)\n{\n  Console.WriteLine($\"Hello {name.ToUpper()}!\");\n}\n```\n\n> [!NOTE]\n> Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Elenchi di altri tipi
  durationInMinutes: 5
  content: "Finora è stato usato il tipo `string` negli elenchi. Di seguito verrà creato un <xref:System.Collections.Generic.List%601> con un tipo diverso. Per iniziare, creare un set di numeri. Eliminare il codice scritto finora e sostituirlo con questo:\n\n```csharp\nvar fibonacciNumbers = new List<int> {1, 1};\n```\n\nQuesto codice crea un elenco di interi e imposta i primi due interi sul valore 1. Questi sono i primi due valori di una *successione di Fibonacci*, ovvero una sequenza di numeri. Ogni numero della successione di Fibonacci viene ottenuto dalla somma dei due numeri precedenti. Aggiungere questo codice:\n\n```csharp\nvar previous = fibonacciNumbers[fibonacciNumbers.Count - 1];\nvar previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];\n\nfibonacciNumbers.Add(previous + previous2);\n\nforeach(var item in fibonacciNumbers)\n    Console.WriteLine(item);\n```\n\nPremere **Esegui** per visualizzare i risultati.\n\n> [!NOTE]\n> Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Esercizio
  durationInMinutes: 10
  content: "È il momento di scoprire se è possibile mettere in pratica alcune delle conoscenze apprese in questa lezione e in quelle precedenti. Applicare i concetti appresi finora in relazione ai numeri di Fibonacci. Provare a scrivere il codice per generare i primi 20 numeri nella successione.\n\n> [!NOTE]\n> Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Completare l'esercizio
  durationInMinutes: 3
  content: "I risultati ottenuti sono simili a questi?\n\n```csharp\nvar fibonacciNumbers = new List<int> {1, 1};\n\nwhile (fibonacciNumbers.Count < 20)\n{\n    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];\n    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];\n    \n    fibonacciNumbers.Add(previous + previous2);\n}\nforeach(var item in fibonacciNumbers)\n    Console.WriteLine(item);\n```\n\nA ogni iterazione del ciclo, gli ultimi due interi nell'elenco vengono sommati e il valore risultante viene aggiunto all'elenco. Il ciclo viene ripetuto fino ad aggiungere 20 elementi all'elenco.\n\n> [!NOTE]\n> Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).\n"
- content: "È stata completata l'avvio rapido di elenco. Questa Guida introduttiva è la Guida introduttiva interattiva finale. È possibile continuare a queste guide rapide in ambiente di sviluppo. L'argomento .NET [Introduzione a 10 minuti](https://www.microsoft.com/net/core) contiene istruzioni per l'impostazione dell'ambiente di sviluppo locale. Una volta completate, continuare con [Introduzione alle classi](introduction-to-classes.md) nell'ambiente locale.\n\nAltre informazioni sull'uso del tipo `List` sono disponibili nell'argomento della [Guida di .NET](../../standard/index.md) dedicato alle [raccolte](../../standard/collections/index.md). Questo argomento include anche informazioni su molti altri tipi di raccolta.\0"
