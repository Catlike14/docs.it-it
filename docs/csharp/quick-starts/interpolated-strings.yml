title: Stringhe interpolate in C#
metadata:
  title: Stringhe interpolate in C#. Informazioni per creare una stringa che include altri valori quali date o numeri.
  description: "In questa esercitazione si apprende come usare in modo interattivo nel browser la funzionalità delle stringhe interpolate di C#. Verranno descritte le procedure per scrivere codice C# e visualizzare i risultati della compilazione ed esecuzione del codice direttamente nel browser."
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: Raccolte in C#
items:
- durationInMinutes: 2
  content: "Questa guida introduttiva indica come usare le stringhe interpolate in C# per inserire in modo interattivo valori in un'unica stringa di output. Si usa il browser per scrivere codice C# ed è possibile visualizzare immediatamente i risultati della compilazione e dell'esecuzione del codice. La guida introduttiva include una serie di lezioni che spiegano come concatenare stringhe, inserire valori nelle stringhe e applicare formattazioni diverse alle stringhe stesse.\n"
  ms.openlocfilehash: f54d8e5e3703556b333155fd9541f9d7c7e7fd1b
  ms.sourcegitcommit: 8bde7a3432f30fc771079744955c75c58c4eb393
  ms.translationtype: HT
  ms.contentlocale: it-IT
  ms.lasthandoff: 01/20/2018
- title: Creare una stringa interpolata
  durationInMinutes: 2
  content: "Eseguire il codice seguente nella finestra interattiva. A tale scopo digitare il blocco di codice seguente nella finestra interattiva (sostituire \"\\<name>\" con il proprio nome) e fare clic sul pulsante **Esegui**:\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\nQuando si esegue il programma viene visualizzata una singola stringa con una formula di benvenuto che include il nome dell'utente. La stringa inclusa nella chiamata del metodo <xref:System.Console.WriteLine%2A> è una *stringa interpolata*. Si tratta di un tipo di modello che consente di costruire una stringa singola (detta *stringa di risultato*) da una stringa che include codice incorporato. Le stringhe interpolate sono particolarmente utili per inserire valori in una stringa o per concatenare (unire) più stringhe. \n\nQuesto semplice esempio contiene i due elementi che devono essere presenti in ogni stringa interpolata: \n\n- Un valore letterale stringa che inizia con il carattere `$` prima delle virgolette inglesi aperte. Tra il simbolo `$` e le virgolette non devono essere presenti spazi. Per vedere che cosa accade se si include uno spazio, inserirne uno dopo il carattere `$` nella finestra interattiva e fare clic sul pulsante **Esegui**. Il compilatore C# restituisce il messaggio \"Carattere '$' imprevisto\". \n\n- Una o più *espressioni interpolate*. Un'espressione interpolata è indicata da parentesi graffe di apertura e chiusura (`{` e `}`). All'interno delle parentesi graffe è possibile inserire qualsiasi espressione C# che restituisce un valore (incluso `null`). \n\nOra si proveranno altri esempi di stringhe interpolate con altri tipi di dati.\n\n> [!NOTE]\n> Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Includere tipi di dati diversi
  durationInMinutes: 3
  content: "Nella guida introduttiva precedente è stata usata una stringa interpolata per inserire una stringa in un'altra stringa. Un'espressione stringa interpolata può avere qualsiasi tipo di dati. Considerare ad esempio una stringa interpolata con valori di tipi di dati diversi. \n\nL'esempio seguente include espressioni interpolate con un oggetto `Vegetable`, un membro dell'enumerazione `Unit`, un valore <xref:System.DateTime> e un valore <xref:System.Decimal>. Eseguirla nella finestra interattiva.\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic class Example\n{\n   public enum Unit { item, pound, ounce, dozen };\n\n   public static void Main()\n   {\n      var item = new Vegetable(\"eggplant\");\n      var date = DateTime.Now;\n      var price = 1.99m;\n      var unit = Unit.item;\n      Console.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n   }\n}\n```\n\nOsservare che una delle espressioni interpolate include l'oggetto `item` nella stringa di risultato visualizzata nella console e che in questo caso nella stringa di risultato viene inserita la stringa \"eggplant\" (melanzana). Questo si verifica perché quando un'espressione interpolata non è di tipo stringa, il compilatore C# esegue le operazioni seguenti:\n\n- Se l'espressione interpolata è `null` restituisce una stringa vuota (\"\" o <xref:System.String.Empty?displayProperty=nameWithType>).\n\n- Se l'espressione interpolata non è `null` viene chiamato il metodo `ToString` del tipo dell'espressione interpolata. Per il test di questo funzionamento impostare come commento la definizione del metodo `Vegetable.ToString` dell'esempio, facendola precedere da un simbolo di commento (`//`). Nell'output la stringa \"eggplant\" viene sostituita dal nome completo del tipo (lo spazio dei nomi definito da REPL di C# insieme al nome di tipo). Questo è il funzionamento predefinito del metodo <xref:System.Object.ToString?displayProperty=nameWithType>.   \n\nNell'output di questo esempio la data è troppo precisa (il prezzo delle melanzane non varia ogni secondo) e il valore del prezzo non indica una valuta. Nel passaggio successivo si apprenderà come risolvere questi problemi controllando la formattazione delle stringhe restituite dalle espressioni interpolate.\n\n> [!NOTE]\n> Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Controllare la formattazione delle espressioni interpolate
  durationInMinutes: 5
  content: "Nella lezione precedente sono state inserite nella stringa di risultato due stringhe con formattazione imprecisa. Uno è un valore di data e ora nel quale solo la data risultava corretta. Il secondo è un prezzo che non indicava la valuta. Entrambi i problemi sono di facile soluzione. Le espressioni interpolate possono includere *stringhe di formato* che controllano la formattazione di determinati tipi di dati. Modificare la chiamata di `Console.WriteLine` dell'esempio precedente in modo da includere l'identificatore di formato per i campi data e prezzo, come indicato nella riga seguente:\n\n```csharp\nConsole.WriteLine($\"On {date:d}, the price of {item} was {price:C2} per {unit}.\");\n```\n\nPer specificare una stringa di formato, far seguire all'espressione interpolata i due punti e la stringa di formato desiderata. \"d\" è un [stringa di formato data e ora standard](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) che rappresenta il formato di data breve. \"C2\" è un [stringa di formato numerico standard](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) che rappresenta un numero come valore di valuta con due cifre dopo il separatore decimale.\n\nMolti tipi delle librerie .NET Standard supportano un set predefinito di stringhe di formato. Tali tipi includono tutti i tipi numerici e i tipi data e ora. Per l'elenco completo dei tipi che supportano le stringhe di formato, vedere [Stringhe di formato e i tipi della libreria di classe .NET](../../standard/base-types/formatting-types.md#stringRef) nell'articolo [Formattazione di tipi in .NET](../../standard/base-types/formatting-types.md). Qualsiasi tipo può supportare un set di stringhe di formato. È anche possibile sviluppare estensioni di formattazione personalizzata per aggiungere una formattazione personalizzata ai tipi esistenti. Per informazioni sulla formattazione personalizzata con un'implementazione <xref:System.ICustomFormatter>, vedere [Formattazione personalizzata con ICustomFormatter](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter) nell'articolo [Formattazione di tipi in .NET](../../standard/base-types/formatting-types.md).\n\nProvare a modificare le stringhe di formato nell'**editor .NET** per vedere come cambia la formattazione della stringa di data e ora e del valore numerico. Modificare il valore \"d\" in `{date:d}` inserendo i valori \"t\" (per visualizzare il formato ora breve), \"y\" (per visualizzare anno e mese) e \"yyyy\" (per visualizzare l'anno come numero a quattro cifre). Modificare \"C2\" in `{price:C2}` inserendo \"e\" (per la notazione esponenziale) e \"F3\" (per un valore numerico con tre cifre dopo il separatore decimale).\n\nOltre alla formattazione è possibile controllare la larghezza del campo e l'allineamento delle stringhe restituite da un'espressione interpolata. Il passaggio successivo indica come eseguire questa operazione.\n\n> [!NOTE]\n> Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Controllare la larghezza del campo e l'allineamento delle espressioni interpolate
  durationInMinutes: 6
  content: "In genere quando la stringa restituita da un'espressione interpolata è inclusa in una stringa di risultato non ha spazi iniziali o finali. Specie nelle istanze in cui si lavora con un set di dati, le espressioni interpolate consentono di specificare la larghezza e l'allineamento di un campo. Per verificarlo eseguire il codice seguente.\n\n```csharp\n  var inventory = new Dictionary<string, int>();\n  inventory.Add(\"hammer, ball pein\", 18);\n  inventory.Add(\"hammer, cross pein\", 5);\n  inventory.Add(\"screwdriver, Phillips #2\", 14);\n\n  Console.WriteLine($\"Inventory on {DateTime.Now:d}\");\n  Console.WriteLine(\" \");\n  Console.WriteLine($\"{\"Item\",-25}    {\"Quantity\",10}\");\n  Console.WriteLine(\" \"); \n  foreach (var item in inventory)\n     Console.WriteLine($\"{item.Key,-25}     {item.Value,10}\");\n```\n\nI nomi degli elementi vengono allineati a sinistra e le quantità corrispondenti vengono allineate a destra. Per specificare l'allineamento aggiungere una virgola (\",\") dopo l'espressione e quindi indicare la larghezza del campo. Se la larghezza del campo è un numero positivo, il campo è allineato a destra:\n\n```text\n{expression, width}\n```\n\nSe la larghezza del campo è un numero negativo, il campo è allineato a sinistra:\n\n```text\n{expression, -width}\n```\nProvare a rimuovere il segno negativo dalle espressioni interpolate `{\"Item\",-25}` e `{item.Key,-25}` ed eseguire di nuovo l'esempio. Questa volta il nome dell'elemento viene allineato a destra.\n\nÈ possibile combinare una larghezza di campo e una stringa di formato in un'unica espressione interpolata. Immettere prima la larghezza del campo, seguita dai due punti e dalla stringa di formato. Provare il semplice programma seguente, che visualizza tre stringhe formattate con larghezze di campo definite.\n\n```csharp\nConsole.WriteLine($\"{DateTime.Now,-20:d} Hour {DateTime.Now,-10:HH} {1063.342,15:N2} feet\");\n```\n\n> [!NOTE]\n> Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).\n"
- content: "È stata completata la guida introduttiva per le stringhe interpolate. \n\nÈ possibile continuare con queste guide introduttive nell'ambiente di sviluppo locale. Dopo aver acquisito familiarità con gli elementi di base dello [sviluppo locale](local-environment.md), scegliere una guida introduttiva. È possibile provare questo stesso esercizio, passare direttamente alla guida introduttiva successiva o iniziare da capo con la guida introduttiva [Numeri in C#](numbers-in-csharp-local.md).\n\nPer altre informazioni sull'uso delle stringhe interpolate, vedere l'argomento [Stringhe interpolate](../language-reference/keywords/interpolated-strings.md) nei Riferimenti per C#.\0"
