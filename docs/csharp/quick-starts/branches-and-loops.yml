### YamlMime:YamlDocument
documentType: Tutorial
title: <span data-ttu-id="161ee-101">Rami e cicli</span><span class="sxs-lookup"><span data-stu-id="161ee-101">Branches and loops</span></span>
metadata:
  title: <span data-ttu-id="161ee-102">Rami e cicli</span><span class="sxs-lookup"><span data-stu-id="161ee-102">Branches and loops</span></span>
  description: '<span data-ttu-id="161ee-103">In questa esercitazione sui rami e i cicli si userà il browser per imparare a usare C# in modo interattivo.</span><span class="sxs-lookup"><span data-stu-id="161ee-103">In this tutorial about branches and loops, you''ll use your browser to learn C# interactively.</span></span> <span data-ttu-id="161ee-104">Verranno descritte le procedure per scrivere codice C# e visualizzare i risultati della compilazione ed esecuzione del codice direttamente nel browser.</span><span class="sxs-lookup"><span data-stu-id="161ee-104">You''re going to write C# code and see the results of compiling and running your code directly in the browser.</span></span>'
  audience: Developer
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: arrays-and-collections
  nextTutorialTitle: 'Arrays and colletions in C#'
items:
  - durationInMinutes: 1
    content: |
      <span data-ttu-id="161ee-105">Questa esercitazione spiega come scrivere codice che esamina le variabili e modifica il percorso di esecuzione in base a tali variabili.</span><span class="sxs-lookup"><span data-stu-id="161ee-105">This tutorial teaches you about how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="161ee-106">Il codice C# verrà scritto in modo interattivo, usando il browser per scrivere codice C# e visualizzare i risultati della compilazione ed esecuzione del codice.</span><span class="sxs-lookup"><span data-stu-id="161ee-106">You'll write C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="161ee-107">L'esercitazione contiene una serie di lezioni che esplorano i costrutti per rami e cicli nel linguaggio C#.</span><span class="sxs-lookup"><span data-stu-id="161ee-107">It contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="161ee-108">Queste lezioni presentano le nozioni fondamentali del linguaggio C#.</span><span class="sxs-lookup"><span data-stu-id="161ee-108">These lessons teach you the fundamentals of the C# language.</span></span>
  - title: <span data-ttu-id="161ee-109">Prendere decisioni usando l'istruzione if</span><span class="sxs-lookup"><span data-stu-id="161ee-109">Make decisions using the if statement</span></span>
    durationInMinutes: 4
    content: |
      <span data-ttu-id="161ee-110">Eseguire il codice seguente nella finestra interattiva.</span><span class="sxs-lookup"><span data-stu-id="161ee-110">Run the following code in the interactive window.</span></span> <span data-ttu-id="161ee-111">A tale scopo, digitare il blocco di codice seguente nella finestra interattiva e fare clic sul pulsante **Esegui**:</span><span class="sxs-lookup"><span data-stu-id="161ee-111">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>

      ```csharp
      int a = 5;
      int b = 6;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10.");
      ```

      <span data-ttu-id="161ee-112">Modificare la dichiarazione di `b` in modo che la somma sia minore di 10:</span><span class="sxs-lookup"><span data-stu-id="161ee-112">Modify the declaration of `b` so that the sum is less than 10:</span></span> 

      ```csharp
      int b = 3;
      ```

      <span data-ttu-id="161ee-113">Fare di nuovo clic sul pulsante **Esegui**.</span><span class="sxs-lookup"><span data-stu-id="161ee-113">Click the **Run** button again.</span></span> <span data-ttu-id="161ee-114">Dato che la risposta è minore a 10, non viene visualizzato nulla.</span><span class="sxs-lookup"><span data-stu-id="161ee-114">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="161ee-115">La **condizione** testata è false.</span><span class="sxs-lookup"><span data-stu-id="161ee-115">The **condition** you're testing is false.</span></span> <span data-ttu-id="161ee-116">Non esiste codice da eseguire perché è stato scritto solo uno dei possibili rami per un'istruzione `if`, ovvero il ramo true.</span><span class="sxs-lookup"><span data-stu-id="161ee-116">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>

      > [!TIP]
      > <span data-ttu-id="161ee-117">Mentre si impara a usare C# (o qualsiasi linguaggio di programmazione) sicuramente si commetteranno errori durante la scrittura del codice.</span><span class="sxs-lookup"><span data-stu-id="161ee-117">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="161ee-118">Il **compilatore** troverà questi errori e li segnalerà.</span><span class="sxs-lookup"><span data-stu-id="161ee-118">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="161ee-119">Quando l'output contiene messaggi di errore, esaminare attentamente il codice di esempio e il codice nella finestra interattiva per scoprire cosa correggere.</span><span class="sxs-lookup"><span data-stu-id="161ee-119">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>
      > <span data-ttu-id="161ee-120">Questo esercizio sarà utile per imparare la struttura del codice C#.</span><span class="sxs-lookup"><span data-stu-id="161ee-120">That exercise will help you learn the structure of C# code.</span></span>     

      <span data-ttu-id="161ee-121">Questo primo esempio dimostra le potenzialità di `if` e dei tipi booleani.</span><span class="sxs-lookup"><span data-stu-id="161ee-121">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="161ee-122">Un valore *booleano* è una variabile che può avere uno di due valori: `true` o `false`.</span><span class="sxs-lookup"><span data-stu-id="161ee-122">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="161ee-123">C# definisce un tipo speciale, `bool` per le variabili booleane.</span><span class="sxs-lookup"><span data-stu-id="161ee-123">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="161ee-124">L'istruzione `if` controlla il valore di un `bool`.</span><span class="sxs-lookup"><span data-stu-id="161ee-124">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="161ee-125">Quando il valore è `true`, viene eseguita l'istruzione che segue `if`.</span><span class="sxs-lookup"><span data-stu-id="161ee-125">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="161ee-126">In caso contrario, l'istruzione viene ignorata.</span><span class="sxs-lookup"><span data-stu-id="161ee-126">Otherwise, it is skipped.</span></span> 

      <span data-ttu-id="161ee-127">Questo processo di controllo delle condizioni ed esecuzione di istruzioni in base a queste condizioni offre molte potenzialità.</span><span class="sxs-lookup"><span data-stu-id="161ee-127">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="161ee-128">L'esplorazione continua nelle prossime lezioni.</span><span class="sxs-lookup"><span data-stu-id="161ee-128">Let's explore more.</span></span>

      > [!NOTE]
      > <span data-ttu-id="161ee-129">Questa esperienza di scrittura del codice online è in modalità di anteprima.</span><span class="sxs-lookup"><span data-stu-id="161ee-129">This online coding experience is in preview mode.</span></span> <span data-ttu-id="161ee-130">Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="161ee-130">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="161ee-131">Usare insieme if ed else</span><span class="sxs-lookup"><span data-stu-id="161ee-131">Make if and else work together</span></span>
    durationInMinutes: 10
    content: |

      <span data-ttu-id="161ee-132">Per eseguire codice diverso per i rami true e false, è necessario creare un ramo `else` che viene eseguito quando la condizione è false.</span><span class="sxs-lookup"><span data-stu-id="161ee-132">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id="161ee-133">Provare questo codice:</span><span class="sxs-lookup"><span data-stu-id="161ee-133">Try this:</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10");
      else
          Console.WriteLine("The answer is not greater than 10");
      ```

      <span data-ttu-id="161ee-134">L'istruzione che segue la parola chiave `else` viene eseguita solo quando la condizione testata è `false`.</span><span class="sxs-lookup"><span data-stu-id="161ee-134">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id="161ee-135">La combinazione di `if` e `else` con condizioni booleane offre tutte le potenzialità necessarie.</span><span class="sxs-lookup"><span data-stu-id="161ee-135">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>

      > [!IMPORTANT]
      > <span data-ttu-id="161ee-136">Il rientro applicato alle righe successive alle istruzioni `if` e `else` è pensato per i lettori umani.</span><span class="sxs-lookup"><span data-stu-id="161ee-136">The indentation under the `if` and `else` statements is for human readers.</span></span>
      > <span data-ttu-id="161ee-137">Nel linguaggio C# i rientri o gli spazi vuoti non sono significativi.</span><span class="sxs-lookup"><span data-stu-id="161ee-137">The C# language doesn't treat indentation or whitespace as significant.</span></span> <span data-ttu-id="161ee-138">L'istruzione che segue la parola chiave `if` o `else` verrà eseguita in base alla condizione.</span><span class="sxs-lookup"><span data-stu-id="161ee-138">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id="161ee-139">Per tutti gli esempi in questa esercitazione viene seguita la pratica comune che prevede il rientro delle righe in base all'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="161ee-139">All the samples in this tutorial follow a common practice to indent lines based on execution.</span></span>

      <span data-ttu-id="161ee-140">Dato che il rientro non è significativo, è necessario usare `{` e `}` per indicare quando si vuole includere più di un'istruzione nel blocco con esecuzione condizionale.</span><span class="sxs-lookup"><span data-stu-id="161ee-140">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id="161ee-141">I programmatori C# usano in genere le parentesi graffe in tutte le clausole `if` e `else`.</span><span class="sxs-lookup"><span data-stu-id="161ee-141">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id="161ee-142">L'esempio seguente è identico a quello appena creato.</span><span class="sxs-lookup"><span data-stu-id="161ee-142">The following example is the same as what you just created.</span></span> <span data-ttu-id="161ee-143">Provarlo.</span><span class="sxs-lookup"><span data-stu-id="161ee-143">Try it.</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
      {
          Console.WriteLine("The answer is greater than 10");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
      }
      ```

      > [!TIP]
      > <span data-ttu-id="161ee-144">Nelle parti restanti di questa esercitazione, tutti gli esempi di codice includono le parentesi graffe conformemente alle consuetudini comuni.</span><span class="sxs-lookup"><span data-stu-id="161ee-144">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>

      <span data-ttu-id="161ee-145">È possibile testare condizioni più complesse:</span><span class="sxs-lookup"><span data-stu-id="161ee-145">You can test more complicated conditions:</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) && (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("And the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("Or the first number is not greater than the second");
      }
      ```

      <span data-ttu-id="161ee-146">`&&` rappresenta "e"</span><span class="sxs-lookup"><span data-stu-id="161ee-146">The `&&` represents "and".</span></span> <span data-ttu-id="161ee-147">e significa che entrambe le condizioni devono essere true per eseguire l'istruzione nel ramo true.</span><span class="sxs-lookup"><span data-stu-id="161ee-147">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id="161ee-148">Questi esempi mostrano anche che è possibile includere più istruzioni in ogni ramo condizionale, a condizione di racchiuderle tra `{` e `}`.</span><span class="sxs-lookup"><span data-stu-id="161ee-148">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>

      <span data-ttu-id="161ee-149">È anche possibile usare `||` per rappresentare "o":</span><span class="sxs-lookup"><span data-stu-id="161ee-149">You can also use  `||` to represent "or":</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) || (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("Or the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("And the first number is not greater than the second");
      }
      ```

      > [!NOTE]
      > <span data-ttu-id="161ee-150">Questa esperienza di scrittura del codice online è in modalità di anteprima.</span><span class="sxs-lookup"><span data-stu-id="161ee-150">This online coding experience is in preview mode.</span></span> <span data-ttu-id="161ee-151">Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="161ee-151">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="161ee-152">Usare i cicli per ripetere le operazioni</span><span class="sxs-lookup"><span data-stu-id="161ee-152">Use loops to repeat operations</span></span>
    durationInMinutes: 6
    content: |
      <span data-ttu-id="161ee-153">I **cicli** rappresentano un altro concetto importante per la creazione di programmi di più grandi dimensioni.</span><span class="sxs-lookup"><span data-stu-id="161ee-153">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="161ee-154">I cicli vengono usati per ripetere istruzioni che si vuole eseguire più volte.</span><span class="sxs-lookup"><span data-stu-id="161ee-154">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="161ee-155">Provare questo codice nella finestra interattiva:</span><span class="sxs-lookup"><span data-stu-id="161ee-155">Try this code in the interactive window:</span></span>

      ```csharp
      int counter = 0;
      while (counter < 10)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      }
      ```

      <span data-ttu-id="161ee-156">L'istruzione `while` verifica una condizione ed esegue l'istruzione che segue `while`.</span><span class="sxs-lookup"><span data-stu-id="161ee-156">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="161ee-157">Ripeterà la verifica della condizione e l'esecuzione di tali istruzioni fino a quando la condizione è false.</span><span class="sxs-lookup"><span data-stu-id="161ee-157">It will repeat checking the condition and executing those statements until the condition is false.</span></span>

      <span data-ttu-id="161ee-158">Questo esempio include un altro operatore nuovo.</span><span class="sxs-lookup"><span data-stu-id="161ee-158">There's one other new operator in this example.</span></span> <span data-ttu-id="161ee-159">I caratteri `++` dopo la variabile `counter` rappresentano l'operatore di **incremento**.</span><span class="sxs-lookup"><span data-stu-id="161ee-159">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="161ee-160">Questo operatore aggiunge 1 al valore del contatore e archivia il valore nella variabile contatore.</span><span class="sxs-lookup"><span data-stu-id="161ee-160">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>

      > [!IMPORTANT]
      > <span data-ttu-id="161ee-161">Assicurarsi che la condizione del ciclo `while` passi a false quando si esegue il codice.</span><span class="sxs-lookup"><span data-stu-id="161ee-161">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="161ee-162">In caso contrario, si crea un **ciclo infinito** in cui il programma non termina mai.</span><span class="sxs-lookup"><span data-stu-id="161ee-162">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="161ee-163">Non è prevista una dimostrazione di questo scenario, perché in questo caso si verifica il timeout del motore che esegue il codice e il programma non produrrà alcun output.</span><span class="sxs-lookup"><span data-stu-id="161ee-163">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>

      <span data-ttu-id="161ee-164">Il ciclo `while` testa la condizione prima di eseguire il codice dopo `while`.</span><span class="sxs-lookup"><span data-stu-id="161ee-164">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="161ee-165">Il ciclo `do` ... `while` esegue prima il codice e poi controlla la condizione,</span><span class="sxs-lookup"><span data-stu-id="161ee-165">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="161ee-166">come segue:</span><span class="sxs-lookup"><span data-stu-id="161ee-166">It looks like this:</span></span>

      ```csharp
      int counter = 0;
      do
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      } while (counter < 10);
      ```

      <span data-ttu-id="161ee-167">Questo ciclo `do` e il ciclo `while` precedente funzionano allo stesso modo.</span><span class="sxs-lookup"><span data-stu-id="161ee-167">This `do` loop and the earlier `while` loop work the same.</span></span> 

      <span data-ttu-id="161ee-168">Nella prossima lezione verrà presentata un'ultima istruzione di ciclo.</span><span class="sxs-lookup"><span data-stu-id="161ee-168">Let's move on to one last loop statement.</span></span>

      > [!NOTE]
      > <span data-ttu-id="161ee-169">Questa esperienza di scrittura del codice online è in modalità di anteprima.</span><span class="sxs-lookup"><span data-stu-id="161ee-169">This online coding experience is in preview mode.</span></span> <span data-ttu-id="161ee-170">Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="161ee-170">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="161ee-171">Usare il ciclo for</span><span class="sxs-lookup"><span data-stu-id="161ee-171">Work with the for loop</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="161ee-172">Un'altra istruzione di ciclo comune nel codice C# è il ciclo `for`.</span><span class="sxs-lookup"><span data-stu-id="161ee-172">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="161ee-173">Provare questo codice nella finestra interattiva:</span><span class="sxs-lookup"><span data-stu-id="161ee-173">Try this code in the interactive window:</span></span>

      ```csharp
      for(int counter = 0; counter < 10; counter++)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
      } 
      ```

      <span data-ttu-id="161ee-174">Questo codice esegue le stesse operazioni di ciclo `while` e `do` già usate.</span><span class="sxs-lookup"><span data-stu-id="161ee-174">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="161ee-175">L'istruzione `for` è composta da tre parti che ne controllano il funzionamento.</span><span class="sxs-lookup"><span data-stu-id="161ee-175">The `for` statement has three parts that control how it works.</span></span> 

      <span data-ttu-id="161ee-176">La prima parte è l'**inizializzatore for**: `for counter = 0;` dichiara che `counter` è la variabile di ciclo e imposta il valore iniziale su `0`.</span><span class="sxs-lookup"><span data-stu-id="161ee-176">The first part is the **for initializer**: `for counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>

      <span data-ttu-id="161ee-177">La parte centrale è la **condizione for**: `counter < 10` dichiara che questo ciclo `for` continua l'esecuzione fino a quando il valore del contatore è minore di 10.</span><span class="sxs-lookup"><span data-stu-id="161ee-177">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>

      <span data-ttu-id="161ee-178">La parte finale è l'**iteratore for**: `counter++` specifica come modificare la variabile di ciclo dopo l'esecuzione del blocco successivo all'istruzione `for`.</span><span class="sxs-lookup"><span data-stu-id="161ee-178">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="161ee-179">In questo caso, specifica che `counter` deve essere incrementato di 1 a ogni esecuzione del blocco.</span><span class="sxs-lookup"><span data-stu-id="161ee-179">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>

      <span data-ttu-id="161ee-180">Sperimentare da soli questi elementi.</span><span class="sxs-lookup"><span data-stu-id="161ee-180">Experiment with these yourself.</span></span> <span data-ttu-id="161ee-181">Eseguire queste prove:</span><span class="sxs-lookup"><span data-stu-id="161ee-181">Try each of the following:</span></span>

      - <span data-ttu-id="161ee-182">Cambiare l'inizializzatore in modo che inizi da un valore diverso.</span><span class="sxs-lookup"><span data-stu-id="161ee-182">Change the initializer to start at a different value.</span></span>
      - <span data-ttu-id="161ee-183">Cambiare la condizione in modo che si interrompa in corrispondenza di un valore diverso.</span><span class="sxs-lookup"><span data-stu-id="161ee-183">Change the condition to stop at a different value.</span></span>

      <span data-ttu-id="161ee-184">Al termine, passare alla prossima lezione che prevede la scrittura di codice per usare quanto finora appreso.</span><span class="sxs-lookup"><span data-stu-id="161ee-184">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>

      > [!NOTE]
      > <span data-ttu-id="161ee-185">Questa esperienza di scrittura del codice online è in modalità di anteprima.</span><span class="sxs-lookup"><span data-stu-id="161ee-185">This online coding experience is in preview mode.</span></span> <span data-ttu-id="161ee-186">Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="161ee-186">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="161ee-187">Uso combinato di rami e cicli</span><span class="sxs-lookup"><span data-stu-id="161ee-187">Combining branches and loops</span></span>
    durationInMinutes: 12
    content: |
      <span data-ttu-id="161ee-188">Dopo aver esaminato l'istruzione `if` e i costrutti per i cicli nel linguaggio C#, provare a scrivere codice C# per ottenere la somma di tutti i numeri interi da 1 a 20 divisibili per 3.</span><span class="sxs-lookup"><span data-stu-id="161ee-188">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="161ee-189">Ecco alcuni suggerimenti:</span><span class="sxs-lookup"><span data-stu-id="161ee-189">Here are a few hints:</span></span>

      - <span data-ttu-id="161ee-190">L'operatore `%` restituisce il resto di un'operazione di divisione.</span><span class="sxs-lookup"><span data-stu-id="161ee-190">The `%` operator gives you the remainder of a division operation.</span></span>
      - <span data-ttu-id="161ee-191">L'istruzione `if` offre la condizione per stabilire se un numero deve fare parte della somma.</span><span class="sxs-lookup"><span data-stu-id="161ee-191">The `if` statement givesx you the condition to see if a number should be part of the sum.</span></span>
      - <span data-ttu-id="161ee-192">Il ciclo `for` può essere utile per ripetere una serie di passaggi per tutti i numeri da 1 a 20.</span><span class="sxs-lookup"><span data-stu-id="161ee-192">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>

      <span data-ttu-id="161ee-193">Sperimentare e quindi</span><span class="sxs-lookup"><span data-stu-id="161ee-193">Try it yourself.</span></span> <span data-ttu-id="161ee-194">controllare i risultati.</span><span class="sxs-lookup"><span data-stu-id="161ee-194">Then check how you did.</span></span>

      > [!NOTE]
      > <span data-ttu-id="161ee-195">Questa esperienza di scrittura del codice online è in modalità di anteprima.</span><span class="sxs-lookup"><span data-stu-id="161ee-195">This online coding experience is in preview mode.</span></span> <span data-ttu-id="161ee-196">Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="161ee-196">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="161ee-197">Completare l'esercizio</span><span class="sxs-lookup"><span data-stu-id="161ee-197">Complete challenge</span></span>
    durationInMinutes: 1
    content: |
      <span data-ttu-id="161ee-198">È stata completata l'esercitazione "Cicli e rami".</span><span class="sxs-lookup"><span data-stu-id="161ee-198">You've completed the "branches and loops" tutorial.</span></span> <span data-ttu-id="161ee-199">Maggiori informazioni su questi concetti sono disponibili in questi argomenti:</span><span class="sxs-lookup"><span data-stu-id="161ee-199">You can learn more about these concepts in these topics:</span></span>

      <span data-ttu-id="161ee-200">[Istruzioni if ed else](../language-reference/keywords/if-else.md) </span><span class="sxs-lookup"><span data-stu-id="161ee-200">[If and else statement](../language-reference/keywords/if-else.md) </span></span>  
      <span data-ttu-id="161ee-201">[Istruzione while](../language-reference/keywords/while.md) </span><span class="sxs-lookup"><span data-stu-id="161ee-201">[While statement](../language-reference/keywords/while.md) </span></span>  
      <span data-ttu-id="161ee-202">[Istruzione do](../language-reference/keywords/do.md) </span><span class="sxs-lookup"><span data-stu-id="161ee-202">[Do statement](../language-reference/keywords/do.md) </span></span>  
      [<span data-ttu-id="161ee-203">Istruzione for</span><span class="sxs-lookup"><span data-stu-id="161ee-203">For statement</span></span>](../language-reference/keywords/for.md)